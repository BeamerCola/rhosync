SugarAccounts:
  id: 1
  name: SugarAccounts
  adapter: SugarAccounts
  app_id: 1

SugarCases:
  id: 2
  name: SugarCases
  app_id: 1
  adapter: SugarCases

SugarEmployees:
  id: 3
  name: SugarEmployees
  app_id: 1
  adapter: SugarEmployees
  
SugarContacts:
  id: 11
  name: SugarContacts
  app_id: 1
  adapter: SugarContacts
  
SugarLeads:
  id: 12
  name: SugarLeads
  app_id: 1
  adapter: SugarLeads
  
SugarOpportunities:
  id: 13
  name: SugarOpportunities
  app_id: 1
  adapter: SugarOpportunities
    
SugarMeetings:
  id: 14
  name: SugarMeetings
  app_id: 1
  adapter: SugarMeetings
    
SugarCalls:
  id: 15
  name: SugarCalls
  app_id: 1
  adapter: SugarCalls

SugarCampaigns:
  id: 16
  name: SugarCampaigns
  app_id: 1
  adapter: SugarCampaigns
    
SugarProducts:
  id: 17
  name: SugarProducts
  app_id: 1
  adapter: SugarProducts
      
SugarTeams:
  id: 18
  name: SugarTeams
  app_id: 1
  adapter: SugarTeams
  
SugarUsers:
  id: 19
  name: SugarUsers
  app_id: 1
  adapter: SugarUsers
  
Wikipedia:
  id: 20
  name: Wikipedia
  app_id: 8
  adapter: Wikipedia

SugarQuotes:
  id: 21
  name: SugarQuotes
  app_id: 1
  adapter: SugarQuotes
    
SiebelServiceRequests:
  id: 4
  name: SiebelServiceRequests
  url: secure-ausomxbha.crmondemand.com
  login: RHOMOBILE/ADAM@RHOMOBILE.COM
  password: password1
  app_id: 2

  prolog: |
    https = Net::HTTP.new(url,"443")
    https.use_ssl = true
    https.verify_mode = OpenSSL::SSL::VERIFY_NONE
    headers={"UserName"=>login,"Password"=>password}
    @session_id=nil
    https.start do |https|
        req = Net::HTTP::Get.new("/Services/Integration?command=login", headers)
        response = https.request(req)
        resp = response.body
        p "Response " + resp
        @session_id=response['Set-Cookie']
    end
    session=@session_id.to_s
    start=session.index('=')
    finish=session.index(';')
    session=session[start+1...finish] if start and finish
    endpoint_url ='https://secure-ausomxbha.crmondemand.com/Services/Integration/ServiceRequest;jsessionid='+session
    obj = Default_Binding_ServiceRequest.new(endpoint_url)
    obj.wiredump_dev = STDERR
    http=nil

  call: |
    input=ServiceRequestWS_ServiceRequestQueryPage_Input.new
    input.startRowNum=0
    s=ServiceRequest.new
    s.serviceRequestId=""
    s.subject=""
    s.createdDate=""
    s.accountName=""
    s.description=""
    s.priority=""
    input.listOfServiceRequest=[s]
    output=obj.serviceRequestQueryPage(input)

  sync: |
    output.listOfServiceRequest.each do |x|
        # subject
        o=ObjectValue.new
        o.source_id=id
        o.object=x.serviceRequestId
        o.attrib="subject"
        o.value=x.subject
        o.save
        #accountName
        o=ObjectValue.new
        o.source_id=id
        o.object=x.serviceRequestId
        o.attrib="accountName"
        o.value=x.accountName
        o.save
        #description
        o=ObjectValue.new
        o.source_id=id
        o.object=x.serviceRequestId
        o.attrib="description"
        o.value=x.description
        o.update_type="pending"
        o.save
        #priority
        o=ObjectValue.new
        o.source_id=id
        o.object=x.serviceRequestId
        o.attrib="priority"
        o.value=x.priority
        o.save
        #createdDate attribute
        o=ObjectValue.new
        o.source_id=id
        o.object=x.serviceRequestId
        o.attrib="createdDate"
        o.value=x.createdDate
        o.save
    end

  createcall: |
      ServiceRequestWS_ServiceRequestInsert_Input.new
      s=ServiceRequest.new
      s.serviceRequestId=""
      s.accountName=name_value_list[0]["value"] # account name
      s.description=name_value_list[1]["value"] # description
      s.priority=name_value_list[2]["value"] # priority
      s.subject=name_value_list[3]["value"] # subject
      input.listOfServiceRequest=[s]
      output=obj.serviceRequestInsert(input)

  deletecall: |
    input=ServiceRequestWS_ServiceRequestDelete_Input.new
    s=ServiceRequest.new
    s.serviceRequestId=name_value_list[0]["value"] # ID
    input.listOfServiceRequest=[s]
    output=obj.serviceRequestDelete(input)

  updatecall: |
    input=ServiceRequestWS_ServiceRequestUpdate_Input.new
    s=ServiceRequest.new
    s.accountName=name_value_list[0]["value"] # account name
    s.description=name_value_list[1]["value"] # description
    s.priority=name_value_list[2]["value"] # priority
    s.serviceRequestId=name_value_list[3]["value"] # subject
    input.listOfServiceRequest=[s]
    output=obj.serviceRequestUpdate(input)

  epilog:

LighthouseProjects:
  id: 5
  app_id: 4
  adapter: "LighthouseProjects"
  name: "LighthouseProjects"
  url: "http://rhomobile.lighthouseapp.com"
  login: 
  password: 
  prolog: ""
  deletecall: ""
  sync: ""
  updatecall: ""
  call: ""
  
LighthouseMilestones:
  id: 6
  app_id: 4
  adapter: "LighthouseMilestones"
  name: "LighthouseMilestones"
  url: "http://rhomobile.lighthouseapp.com"
  login: 
  password: 
  prolog: ""
  deletecall: ""
  sync: ""
  updatecall: ""
  call: ""
  
LighthouseTickets:
  id: 7
  app_id: 4
  adapter: "LighthouseTickets"
  name: "LighthouseTickets"
  url: "http://rhomobile.lighthouseapp.com"
  login: 
  password: 
  prolog: ""
  deletecall: ""
  sync: ""
  updatecall: ""
  call: ""

LighthouseUsers:
  id: 8
  app_id: 4
  adapter: "LighthouseUsers"
  name: "LighthouseUsers"
  url: "http://rhomobile.lighthouseapp.com"
  login: 
  password: 
  prolog: ""
  deletecall: ""
  sync: ""
  updatecall: ""
  call: ""
  
LighthouseTicketVersions:
  id: 9
  app_id: 4
  adapter: "LighthouseTicketVersions"
  name: "LighthouseTicketVersions"
  url: "http://rhomobile.lighthouseapp.com"
  login: 
  password: 
  prolog: ""
  deletecall: ""
  sync: ""
  updatecall: ""
  call: ""
  
LighthouseSettings:
  id: 10
  app_id: 4
  adapter: "LighthouseSettings"
  name: "LighthouseSettings"
  url: "http://rhomobile.lighthouseapp.com"
  login: 
  password: 
  prolog: ""
  deletecall: ""
  sync: ""
  updatecall: ""
  call: ""
      
